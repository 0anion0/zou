#!/usr/bin/env python
import sys

from flask_script import Manager, prompt_pass, prompt

from zou.app import app
from zou.app.utils import dbhelpers, auth
from zou.app.project import (
    asset_info,
    person_info,
    project_info,
    task_info,
    shot_info
)

manager = Manager(app)


@manager.command
def init_db():
    print('Creating database and tables...')
    dbhelpers.create_all()
    print('Database and tables created.')


@manager.command
def clear_db():
    print('Deleting database and tables...')
    dbhelpers.drop_all()
    print('Database and tables deleted.')


@manager.command
def reset_db():
    clear_db()
    init_db()


@manager.command
def create_admin():
    print("Please enter an email for the new admin to create.")
    email = prompt("Email")

    print("Please enter a password for the new admin to create.")
    password = prompt_pass("Password")
    confirmation_password = prompt_pass("Password confirmation")

    try:
        auth.validate_email(email)
        auth.validate_password(password, confirmation_password)
        password = auth.encrypt_password(password)
        person_info.create_person(email, password, "Super", "Admin")
        print("Admin successfully created.")

    except auth.PasswordsNoMatchException:
        print("Passwords don't match.")
        sys.exit(1)
    except auth.PasswordTooShortException:
        print("Passwords is too short.")
        sys.exit(1)
    except auth.EmailNotValidException:
        print("Email is not valid.")
        sys.exit(1)

@manager.command
def init_data():
    project_info.get_open_status()
    project_info.get_closed_status()
    print("Project status initialized.")

    asset_info.get_or_create_type("Characters")
    asset_info.get_or_create_type("Props")
    asset_info.get_or_create_type("Environment")
    asset_info.get_or_create_type("FX")
    print("Asset types initialized.")

    shot_info.get_episode_type()
    shot_info.get_sequence_type()
    shot_info.get_shot_type()
    print("Shot types initialized.")

    modeling = task_info.get_or_create_department("Modeling")
    animation = task_info.get_or_create_department("Animation")
    fx = task_info.get_or_create_department("FX")
    compositing = task_info.get_or_create_department("Compositiing")
    concept = task_info.get_or_create_department("Concept")

    task_info.get_or_create_task_type(concept, "Concept", '#8D6E63')
    task_info.get_or_create_task_type(concept, "Storyboard", '#43A047')
    task_info.get_or_create_task_type(modeling, "Texture", '#64B5F6')
    task_info.get_or_create_task_type(modeling, "Modeling", '#78909C')
    task_info.get_or_create_task_type(compositing, "Layout", '#7CB342')
    task_info.get_or_create_task_type(animation, "Animation", '#009688')
    task_info.get_or_create_task_type(animation, "Setup", '#9CCC65')
    task_info.get_or_create_task_type(fx, "FX", '#26C6DA')
    task_info.get_or_create_task_type(compositing, "Lightning", '#F9A825')
    task_info.get_or_create_task_type(compositing, "Render", '#F06292')
    task_info.get_or_create_task_type(compositing, "Compositiing", '#ff5252')
    print("Task types initialized.")

    task_info.get_or_create_status("Todo", "todo", "#f5f5f5")
    task_info.get_or_create_status("Work In Progress", "wip", "#3273dc")
    task_info.get_or_create_status(
        "Waiting For Approval", "wfa", "#ab26ff"
    )
    task_info.get_or_create_status("Retake", "retake", "#ff3860")
    task_info.get_or_create_status("Done", "done", "#22d160")
    print("Task status initialized.")

if __name__ == '__main__':
    manager.run()
